[{"e:\\Projects\\charactercondiment\\src\\reportWebVitals.js":"1","e:\\Projects\\charactercondiment\\src\\LjCard.js":"2","e:\\Projects\\charactercondiment\\src\\App.js":"3","e:\\Projects\\charactercondiment\\src\\Board.js":"4","E:\\Projects\\charactercondiment\\src\\reportWebVitals.js":"5","E:\\Projects\\charactercondiment\\src\\LjCard.js":"6","E:\\Projects\\charactercondiment\\src\\App.js":"7","E:\\Projects\\charactercondiment\\src\\Board.js":"8","E:\\Projects\\charactercondiment\\src\\moves.js":"9","E:\\Projects\\charactercondiment\\src\\Chat.js":"10","E:\\Projects\\charactercondiment\\src\\Lobby.js":"11","E:\\Projects\\charactercondiment\\src\\Room.js":"12","E:\\Projects\\charactercondiment\\src\\Home.js":"13","E:\\Projects\\charactercondiment\\src\\Game.js":"14","E:\\Projects\\charactercondiment\\src\\index.js":"15","E:\\Projects\\charactercondiment\\src\\LobbyApi.js":"16","E:\\Projects\\charactercondiment\\src\\ClueSheet.js":"17","E:\\Projects\\charactercondiment\\src\\deck.js":"18","E:\\Projects\\charactercondiment\\src\\config.js":"19"},{"size":375,"mtime":1609361343417,"results":"20","hashOfConfig":"21"},{"size":308,"mtime":1609361343416,"results":"22","hashOfConfig":"21"},{"size":495,"mtime":1609362841128,"results":"23","hashOfConfig":"21"},{"size":1371,"mtime":1609361343416,"results":"24","hashOfConfig":"21"},{"size":375,"mtime":1609361343417,"results":"25","hashOfConfig":"26"},{"size":545,"mtime":1609418660958,"results":"27","hashOfConfig":"26"},{"size":470,"mtime":1609418660920,"results":"28","hashOfConfig":"26"},{"size":6323,"mtime":1609710340725,"results":"29","hashOfConfig":"26"},{"size":2176,"mtime":1609694333481,"results":"30","hashOfConfig":"26"},{"size":1294,"mtime":1609418660957,"results":"31","hashOfConfig":"26"},{"size":361,"mtime":1609418660959,"results":"32","hashOfConfig":"26"},{"size":3901,"mtime":1609418660961,"results":"33","hashOfConfig":"26"},{"size":5384,"mtime":1609418660958,"results":"34","hashOfConfig":"26"},{"size":3050,"mtime":1609694333475,"results":"35","hashOfConfig":"26"},{"size":692,"mtime":1609418660963,"results":"36","hashOfConfig":"26"},{"size":2613,"mtime":1609418660961,"results":"37","hashOfConfig":"26"},{"size":1649,"mtime":1609694333463,"results":"38","hashOfConfig":"26"},{"size":1652,"mtime":1609418660962,"results":"39","hashOfConfig":"26"},{"size":142,"mtime":1609418660962,"results":"40","hashOfConfig":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"i7olr",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"112jqyx",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"e:\\Projects\\charactercondiment\\src\\reportWebVitals.js",[],["88","89"],"e:\\Projects\\charactercondiment\\src\\LjCard.js",[],"e:\\Projects\\charactercondiment\\src\\App.js",[],"e:\\Projects\\charactercondiment\\src\\Board.js",[],"E:\\Projects\\charactercondiment\\src\\reportWebVitals.js",[],["90","91"],"E:\\Projects\\charactercondiment\\src\\LjCard.js",[],["92","93"],"E:\\Projects\\charactercondiment\\src\\App.js",[],["94","95"],"E:\\Projects\\charactercondiment\\src\\Board.js",["96","97","98","99","100","101","102"],"E:\\Projects\\charactercondiment\\src\\moves.js",[],"E:\\Projects\\charactercondiment\\src\\Chat.js",[],["103","104"],"E:\\Projects\\charactercondiment\\src\\Lobby.js",[],["105","106"],"E:\\Projects\\charactercondiment\\src\\Room.js",[],["107","108"],"E:\\Projects\\charactercondiment\\src\\Home.js",[],"E:\\Projects\\charactercondiment\\src\\Game.js",["109"],"import _pullAt from 'lodash/pullAt';\r\nimport Deck from './deck';\r\nimport MOVES from './moves';\r\n\r\nconst NUM_PLAYERS = 2;\r\nconst CARDS_PER_PLAYER = 5;\r\n\r\n// 4 players -> 7, 8\r\nconst getDrawPileSpecs = (numPlayers) => {\r\n    let drawPileConfig = [\r\n        [],[],\r\n        [7, 8, 9, 10],\r\n        [7, 8, 9, 10],\r\n        [7, 8],\r\n        [7],\r\n        []\r\n    ];\r\n    return drawPileConfig[numPlayers];\r\n}\r\n\r\nexport const TicTacToe = {\r\n    name: 'TicTacToe',\r\n    minPlayers: 2,\r\n    maxPlayers: 6,\r\n    setup: (ctx, setupData) => {\r\n        let deck = Deck.init();\r\n\r\n        // Draw one card for each of the non-player letters\r\n        // No need for separate drawPile decks as long as we maintain the number of cards in each drawPile.\r\n        let drawPiles = [];\r\n        let drawPileSpecs = getDrawPileSpecs(NUM_PLAYERS);\r\n        drawPileSpecs.forEach((drawPile) => {\r\n            let {card, newDeck} = Deck.draw(deck);\r\n            deck = newDeck;\r\n            drawPiles.push({currentLetter: card, cardsLeft: drawPile - 1});\r\n        });\r\n\r\n        // Deal randomized 5-card hand to each player\r\n        // TODO -- let players pick hands for each other\r\n        let players = {};\r\n        for (let i = 0; i < NUM_PLAYERS; i++) {\r\n            let letters = [];\r\n            for (let j = 0; j < CARDS_PER_PLAYER; j++) {\r\n                let {card, newDeck} = Deck.draw(deck);\r\n                deck = newDeck;\r\n                card.owner = i;\r\n                letters.push(card);\r\n            }\r\n            players[i] = {\r\n                activeLetterIndex: 0,\r\n                letters,\r\n            };\r\n        }\r\n\r\n        return {\r\n            clue: [],\r\n            clues: [],\r\n            players,\r\n            deck,\r\n            drawPiles,\r\n            chat: [],\r\n        };\r\n    },\r\n    turn: {\r\n        moveLimit: 1,\r\n        onBegin: (G, ctx) => {\r\n            ctx.events.setActivePlayers({currentPlayer: 'action', others: 'idle'});\r\n        },\r\n        stages: {\r\n            // Stage for the active player\r\n            action: {\r\n                moves: {\r\n                    deselectCard: MOVES.deselectCard,\r\n                    nextLetter: MOVES.nextLetter,\r\n                    selectCard: MOVES.selectCard,\r\n                    sendMessage: MOVES.sendMessage,\r\n                    submitClue: MOVES.submitClue,\r\n                }\r\n            },\r\n            // These are the non-active players\r\n            idle: {\r\n                moves: {\r\n                    nextLetter: MOVES.nextLetter,\r\n                    pass: MOVES.pass,\r\n                    sendMessage: MOVES.sendMessage,\r\n                }\r\n            },\r\n            // This is the player state where they are ready for the next turn.\r\n            ready: {\r\n                moves: {\r\n                    sendMessage: MOVES.sendMessage,\r\n                }\r\n            }\r\n        }\r\n    },\r\n    // TODO -- return sanitized game state for the active player\r\n    playerView: (G, ctx, playerID) => {\r\n        return G;\r\n    },\r\n    endIf: (G, ctx) => {\r\n\r\n    },\r\n};\r\n","E:\\Projects\\charactercondiment\\src\\index.js",[],"E:\\Projects\\charactercondiment\\src\\LobbyApi.js",[],"E:\\Projects\\charactercondiment\\src\\ClueSheet.js",["110","111"],"import React from 'react';\r\nimport {TextField} from '@react-md/form';\r\n\r\nexport default class ClueSheet extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let guesses = [];\r\n        for (let i = 0; i < 10; i++) {\r\n            guesses.push('');\r\n        }\r\n        this.state = {guesses};\r\n    }\r\n\r\n    get entries() {\r\n        const {props: {G}, state: {guesses}} = this;\r\n        let clues = G.clues.filter((clue) => clue.playerId != localStorage.getItem('id'));\r\n        let entries = [];\r\n        for (let i = 0; i < 10; i++) {\r\n            entries.push({\r\n                clue: clues[i],\r\n                guess: guesses[i],\r\n            });\r\n        }\r\n        return entries;\r\n    }\r\n\r\n    handleGuessChange = (index) => (e) => {\r\n        let guesses = [...this.state.guesses];\r\n        guesses[index] = e.target.value;\r\n        this.setState({guesses});\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {\r\n                this.entries.map((entry, index) => <Row entry={entry} onGuessChange={this.handleGuessChange(index)} />)\r\n            }\r\n        </div>;\r\n    }\r\n}\r\n\r\nclass Row extends React.Component {\r\n    get word() {\r\n        const {clue} = this.props.entry;\r\n        let word = '';\r\n        if (clue && clue.clue) {\r\n            word = clue.clue.map((card) => card.owner == localStorage.getItem('id') ? '?' : card.letter).join('');\r\n        }\r\n        return word;\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <TextField inline value={this.word} />\r\n            <TextField inline onChange={this.props.onGuessChange} value={this.props.entry.guess} />\r\n        </div>\r\n    }\r\n}","E:\\Projects\\charactercondiment\\src\\deck.js",[],"E:\\Projects\\charactercondiment\\src\\config.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"112","replacedBy":"118"},{"ruleId":"114","replacedBy":"119"},{"ruleId":"112","replacedBy":"120"},{"ruleId":"114","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":20,"column":30,"nodeType":"124","messageId":"125","endLine":20,"endColumn":32},{"ruleId":"126","severity":1,"message":"127","line":24,"column":16,"nodeType":"128","messageId":"129","endLine":24,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":50,"column":16,"nodeType":"128","messageId":"129","endLine":50,"endColumn":19},{"ruleId":"126","severity":1,"message":"130","line":50,"column":21,"nodeType":"128","messageId":"129","endLine":50,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":56,"column":16,"nodeType":"128","messageId":"129","endLine":56,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":63,"column":16,"nodeType":"128","messageId":"129","endLine":63,"endColumn":19},{"ruleId":"122","severity":1,"message":"123","line":98,"column":44,"nodeType":"124","messageId":"125","endLine":98,"endColumn":46},{"ruleId":"112","replacedBy":"131"},{"ruleId":"114","replacedBy":"132"},{"ruleId":"112","replacedBy":"133"},{"ruleId":"114","replacedBy":"134"},{"ruleId":"112","replacedBy":"135"},{"ruleId":"114","replacedBy":"136"},{"ruleId":"126","severity":1,"message":"137","line":1,"column":8,"nodeType":"128","messageId":"129","endLine":1,"endColumn":15},{"ruleId":"122","severity":1,"message":"138","line":16,"column":60,"nodeType":"124","messageId":"125","endLine":16,"endColumn":62},{"ruleId":"122","severity":1,"message":"123","line":47,"column":55,"nodeType":"124","messageId":"125","endLine":47,"endColumn":57},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],["139"],["140"],["139"],["140"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'ctx' is assigned a value but never used.","Identifier","unusedVar","'G' is assigned a value but never used.",["139"],["140"],["139"],["140"],["139"],["140"],"'_pullAt' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]